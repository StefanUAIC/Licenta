# Generated by Django 5.0.6 on 2024-06-04 20:35

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='easy', max_length=10)),
                ('example_input', models.TextField()),
                ('example_output', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('solution_code', models.TextField()),
                ('grade', models.IntegerField(choices=[(9, '9th'), (10, '10th'), (11, '11th'), (12, '12th')], default=9)),
                ('category', models.CharField(choices=[('arrays', 'Arrays'), ('linked_lists', 'Linked Lists'), ('sorting', 'Sorting'), ('searching', 'Searching'), ('trees', 'Trees'), ('graphs', 'Graphs'), ('dynamic_programming', 'Dynamic Programming'), ('recursion', 'Recursion'), ('backtracking', 'Backtracking'), ('bit_manipulation', 'Bit Manipulation'), ('greedy', 'Greedy'), ('math', 'Math'), ('geometry', 'Geometry'), ('combinatorics', 'Combinatorics'), ('probability', 'Probability'), ('game_theory', 'Game Theory'), ('puzzles', 'Puzzles'), ('miscellaneous', 'Miscellaneous')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stdin', models.TextField()),
                ('expected_output', models.TextField()),
            ],
        ),
    ]
